const { Resend } = require('resend');
const { v4: uuid } = require('uuid');

class EmailService {
    constructor() {
        this.resend = new Resend(process.env.RESEND_API_KEY);
        this.recipientEmail = process.env.NOTIFICATION_EMAIL;
        this.senderEmail = process.env.SENDER_EMAIL;
    }

    /**
     * Formats form data into a clean, readable string without JSON syntax
     * @param {Object} formData - The form data to format
     * @returns {String} - Formatted form data as a string
     */
    formatFormData(formData) {
        let result = '';
        
        // Helper function to format nested objects
        const formatNestedObject = (obj, indent = '') => {
            let nestedResult = '';
            for (const [key, value] of Object.entries(obj)) {
                if (typeof value === 'object' && value !== null) {
                    nestedResult += `${indent}${key}:\n`;
                    nestedResult += formatNestedObject(value, indent + '  ');
                } else {
                    nestedResult += `${indent}${key}: ${value}\n`;
                }
            }
            return nestedResult;
        };
        
        // Process the top-level keys
        const sortedEntries = Object.entries(formData)
            .sort(([keyA], [keyB]) => {
                const numA = parseInt(keyA);
                const numB = parseInt(keyB);
                return isNaN(numA) || isNaN(numB) ? 0 : numA - numB;
            });
            
        for (const [key, value] of sortedEntries) {
            if (typeof value === 'object' && value !== null) {
                result += `${key}\n`;
                result += formatNestedObject(value, '  ');
            } else {
                result += `${key} ${value}\n`;
            }
        }
        
        return result;
    }

    /**
     * Sends a notification email when a new form is submitted
     * @param {Object} formData - The form data submitted by the user
     * @param {Array} wineSelection - The wine selection generated by the LLM
     * @returns {Promise<Object>} - The result of the email sending operation
     */
    async sendSubmissionNotification(formData, wineSelection) {
        try {
            // Format the form data for email in a clean, readable format
            const formDataFormatted = this.formatFormData(formData);
            
            // Format the wine selection for email
            const wineSelectionFormatted = wineSelection.map((wine, index) => {
                return `${index + 1}. ${wine.domaine_chateau} - ${wine.appellation} (${wine.couleur}) - ${wine.prix}â‚¬`;
            }).join('\n');
            
            // Create email content
            const emailContent = `
                <h1>Un nouveau formulaire Wine is Mine a Ã©tÃ© rempli ðŸŽ‰ </h1>
                <p>Voici ce que nous avons obtenu</p>
                
                <h2>SÃ©lection (${wineSelection.length} vins):</h2>
                <pre>${wineSelectionFormatted}</pre>
                
                <h2>DonnÃ©es client:</h2>
                <pre>${formDataFormatted}</pre>
            `;
            
            // Send the email
            const { data, error } = await this.resend.emails.send({
                from: this.senderEmail,
                to: this.recipientEmail,
                subject: 'Nouvelle entrÃ©e dans le formulaire Wine is Mine',
                html: emailContent,
                headers: {
                    'X-Entity-Ref-ID': uuid(),
                  },
            });
            
            if (error) {
                console.error('Error sending email notification:', error);
                return { error };
            }
            
            console.log('Email notification sent successfully:', data);
            return { data };
        } catch (error) {
            console.error('Error in email service:', error);
            return { error };
        }
    }
}

module.exports = new EmailService();